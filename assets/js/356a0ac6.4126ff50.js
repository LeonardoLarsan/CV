"use strict";(self.webpackChunkc_3=self.webpackChunkc_3||[]).push([[117],{8208:function(e,a,o){o.r(a),o.d(a,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return t},toc:function(){return c},default:function(){return p}});var n=o(7462),s=o(3366),r=(o(7294),o(3905)),i=["components"],d={title:"Sobre mi"},l="Sobre mi",t={type:"mdx",permalink:"https://leonardolarsan.github.io/CV/about",source:"@site/src/pages/about.md"},c=[{value:"Breve descripci\xf3n (de mi mismo)",id:"breve-descripci\xf3n-de-mi-mismo",children:[]},{value:"Descripci\xf3n profesional",id:"descripci\xf3n-profesional",children:[]},{value:"Reflexiones y lecciones que han marcado mi evoluci\xf3n como desarrollador",id:"reflexiones-y-lecciones-que-han-marcado-mi-evoluci\xf3n-como-desarrollador",children:[{value:"\xbfPor qu\xe9 apostar a un c\xf3digo de alta calidad y no a la productividad inmediata?",id:"por-qu\xe9-apostar-a-un-c\xf3digo-de-alta-calidad-y-no-a-la-productividad-inmediata",children:[]},{value:"\xbfPor qu\xe9 a veces lo mejor es priorizar la calidad por sobre las metodolog\xedas?",id:"por-qu\xe9-a-veces-lo-mejor-es-priorizar-la-calidad-por-sobre-las-metodolog\xedas",children:[]},{value:"\xbfPor qu\xe9 defiendo Clean Code y no otras pr\xe1cticas de desarrollo?",id:"por-qu\xe9-defiendo-clean-code-y-no-otras-pr\xe1cticas-de-desarrollo",children:[]},{value:"\xbfPor qu\xe9 prefiero implementar Clean Code y no una buena documentaci\xf3n?",id:"por-qu\xe9-prefiero-implementar-clean-code-y-no-una-buena-documentaci\xf3n",children:[]},{value:"\xbfPor qu\xe9 un lenguaje tipado y no uno din\xe1mico?",id:"por-qu\xe9-un-lenguaje-tipado-y-no-uno-din\xe1mico",children:[]},{value:"Valores por defecto seg\xfan su tipo y no resultados din\xe1micos.",id:"valores-por-defecto-seg\xfan-su-tipo-y-no-resultados-din\xe1micos",children:[]},{value:"\xbfPor qu\xe9 programaci\xf3n declarativa y no imperativa?",id:"por-qu\xe9-programaci\xf3n-declarativa-y-no-imperativa",children:[]},{value:"\xbfPor qu\xe9 programaci\xf3n funcional y no orientada a objetos?",id:"por-qu\xe9-programaci\xf3n-funcional-y-no-orientada-a-objetos",children:[]},{value:"\xbfPor qu\xe9 Clean Arquitecture y no cualquier improvisaci\xf3n u soluci\xf3n r\xe1pida?",id:"por-qu\xe9-clean-arquitecture-y-no-cualquier-improvisaci\xf3n-u-soluci\xf3n-r\xe1pida",children:[]},{value:"\xbf Por qu\xe9 GitHub Flow y no GitLab Flow ?",id:"-por-qu\xe9-github-flow-y-no-gitlab-flow-",children:[]},{value:"\xbfPor qu\xe9 Kanban y no SCRUM?",id:"por-qu\xe9-kanban-y-no-scrum",children:[]},{value:"\xbfPor qu\xe9 acordar tareas en base a descripciones y no en base a palabras?",id:"por-qu\xe9-acordar-tareas-en-base-a-descripciones-y-no-en-base-a-palabras",children:[]},{value:"Considerar todos los puntos de vista y no asumir veracidades propias",id:"considerar-todos-los-puntos-de-vista-y-no-asumir-veracidades-propias",children:[]}]}],u={toc:c};function p(e){var a=e.components,o=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sobre-mi"},"Sobre mi"),(0,r.kt)("h3",{id:"breve-descripci\xf3n-de-mi-mismo"},"Breve descripci\xf3n (de mi mismo)"),(0,r.kt)("p",null,"Argentino, 32 a\xf1os. Vivo el d\xeda a d\xeda intentando ser bueno en mi trabajo y con los dem\xe1s.\nConvivo con mi pareja desde hace m\xe1s de 7 a\xf1os, y con mi gato siam\xe9s de m\xe1s de 10 a\xf1os de edad."),(0,r.kt)("p",null,"Anhelo tener una casa propia y formar una familia, sue\xf1o que es muy dif\xedcil de alcanzar. Vivo de alquiler continuamente, no pudiendo construir una historia en un solo lugar, porque soy inquilino y mudarme es algo normal en mi vida."),(0,r.kt)("p",null,"Como buen milenial, entiendo lo que significa la \u201cmodernidad l\xedquida\u201d en la que vivimos, donde todo es incierto y temporal. Abrazo los cambios. Dejo de lado una vida mon\xf3tona pero inestable a largo plazo. Sacrifico mi presente trabajando fuertemente, a cambio de la estabilidad que pueda obtener en el futuro."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"descripci\xf3n-profesional"},"Descripci\xf3n profesional"),(0,r.kt)("p",null,"Desarrollador y l\xedder t\xe9cnico full stack Javascript y Typescriopt, con m\xe1s de 10 a\xf1os de experiencia. Mi Stack principal es Node.js con Typescript, React, SASS, Ionic, Vue, Express, Fastify, Express, mongoDB, Redis, MySQL, Jest y Cypress, PM2 y Docker. Tengo mayor experiencia en el Front-end. Hago \xe9nfasis en la calidad del trabajo, en su planificaci\xf3n, organizaci\xf3n, resoluci\xf3n, en la toma de decisiones y en el liderazgo."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"reflexiones-y-lecciones-que-han-marcado-mi-evoluci\xf3n-como-desarrollador"},"Reflexiones y lecciones que han marcado mi evoluci\xf3n como desarrollador"),(0,r.kt)("h3",{id:"por-qu\xe9-apostar-a-un-c\xf3digo-de-alta-calidad-y-no-a-la-productividad-inmediata"},"\xbfPor qu\xe9 apostar a un c\xf3digo de alta calidad y no a la productividad inmediata?"),(0,r.kt)("p",null,"A menudo vemos que los desarrolladores son presionados para que aumenten su productividad con fechas de entrega l\xedmite que son muy exigentes, lo que provoca que estos caigan en malas pr\xe1cticas de desarrollo que arruinan la calidad del c\xf3digo. Frente a esta situaci\xf3n, las soluciones r\xe1pidas, y en el momento, son f\xe1ciles de implementar cuando los proyectos reci\xe9n comienzan, pero cuando estos aumentan de tama\xf1o, y se va agregando mayor n\xfamero de caracter\xedsticas, estas van aumentando en complejidad, a tal punto que se vuelve demasiado dif\xedcil para un desarrollador poder mantener esos proyectos cuando el c\xf3digo escrito es ilegible, desordenado e impredecible."),(0,r.kt)("p",null,"Este problema es conocido como la tan temida \u201cdeuda t\xe9cnica\u201d y, a pesar de que es un tema muy conocido en el \xe1mbito de desarrollo de software, muchos l\xedderes t\xe9cnicos y CTOs subestiman enormemente este problema. Ellos piensan que las soluciones o desarrollos r\xe1pidos, centrados \xfanicamente en la funcionalidad y no en la calidad, son sin\xf3nimo de alta productividad, ya que ellos pueden hacer entregas r\xe1pidas de funcionalidades nuevas a los clientes. Sin embargo, cuando el c\xf3digo de baja calidad aumenta de tama\xf1o se vuelve exponencialmente m\xe1s dif\xedcil de mantener, y esto se traduce en una perdida de productividad en el sector de desarrollo, y esto intentan resolverlo presionando aun m\xe1s a los desarrolladores para que alcancen los niveles de productividad que ten\xedan al principio de los proyectos, cuando aun eran mantenibles, de manera que los desarrolladores terminan estresados, desmoralizados y desgastados mentalmente. Este ritmo de trabajo solo puede ser sostenido por los desarrolladores por un periodo limitado, luego de ese tiempo bajan considerablemente su productividad al encontrarse padeciendo el s\xedndrome de burnout."),(0,r.kt)("p",null,"Intentar contratar desarrolladores nuevos para resolver esta situaci\xf3n tambi\xe9n es un error. Los nuevos miembros del equipo, que ingresan con muchas ganas de aportar, tendr\xe1n que luchar con el desorden y el caos de los proyectos. Y, ante la necesidad de mostrarse resolutivos, y al no haber patrones, arquitectura, ni nada definido, ellos trataran de resolver sus problemas de la manera que mejor les parezca y, por ende, introducir\xe1n soluciones r\xe1pidas que aumentaran aun m\xe1s la deuda t\xe9cnica existente. El tiempo seguir\xe1 avanzando, y con \xe9l la complejidad de los proyectos y su deuda t\xe9cnica. La productividad bajar\xe1 tanto que, aunque incorporen nuevos miembros al equipo, es poco lo que se podr\xe1 seguir avanzando, ya que, ante el m\xe1s m\xednimo cambio u agregado en el c\xf3digo, se deber\xe1 invertir una gran cantidad de esfuerzo para solucionar los nuevos errores introducidos. En este tipo de casos, como lamentablemente nunca se \u201cpag\xf3\u201d la deuda t\xe9cnica, los proyectos entran en bancarrota t\xe9cnica, y es entonces cuando los sectores de IT deciden migrar los proyectos a nuevas tecnolog\xedas, culpando a las anteriores tecnolog\xedas como causante de los fracasos. "),(0,r.kt)("p",null,"Todo lo anterior sucede muy a menudo porque los l\xedderes suelen subestimar el valor del trabajo t\xe9cnico y su calidad, tambi\xe9n porque ignoran o no comprenden como las buenas pr\xe1cticas mejoran la calidad del c\xf3digo y, ante esta carencia, naturalizan la dificultad exponencial que va surgiendo en el d\xeda a d\xeda, durante el proceso de desarrollo de software."),(0,r.kt)("p",null,"Lamentablemente muchos l\xedderes justifican sus malas decisiones argumentando que para poder escribir c\xf3digo de alto nivel se necesitar\xeda invertir una mayor cantidad de tiempo y esfuerzo para realizar nuevas funcionalidades, y que esto provoca p\xe9rdidas de productividad en el desarrollo. Sin embargo, a pesar de que tienen raz\xf3n en el corto plazo, ya que las nuevas funcionalidades se terminan entregando m\xe1s tarde, ellos ignoran completamente que a mediano y largo plazo, un c\xf3digo inmanejable se convierte exponencialmente m\xe1s dif\xedcil de mantener. Por lo tanto, un c\xf3digo de alta calidad resulta ser m\xe1s f\xe1cil de mantener y es m\xe1s productivo en la mayor\xeda de los proyectos de hoy en d\xeda, ya que estos aumentan de tama\xf1o y complejidad con el tiempo."),(0,r.kt)("h3",{id:"por-qu\xe9-a-veces-lo-mejor-es-priorizar-la-calidad-por-sobre-las-metodolog\xedas"},"\xbfPor qu\xe9 a veces lo mejor es priorizar la calidad por sobre las metodolog\xedas?"),(0,r.kt)("p",null,"Habitualmente, cuando los proyectos inician y son mantenibles, no se le da importancia a las metodolog\xedas \xe1giles ni a los procesos formales de desarrollo. Estos suelen cobrar importancia tard\xedamente, cuando el c\xf3digo ya se ha tornado inmantenible por su aumento de tama\xf1o y complejidad, y genera baja productividad."),(0,r.kt)("p",null,"Opino que es un error, en este tipo de situaciones, que se priorice las metodolog\xedas por sobre la calidad del c\xf3digo. Al comienzo del proyecto, la metodolog\xeda, la organizaci\xf3n y los procesos de desarrollo ayudan pero, con el tiempo la deuda t\xe9cnica avanza, y aunque se hagan enormes esfuerzos para prevenir errores con el sector de QA, y que los problemas de estimaciones se intenten solucionar afinando m\xe1s la organizaci\xf3n, planificaci\xf3n, y los procesos formales de desarrollo, con cada sprint habr\xe1 m\xe1s y m\xe1s retrasos, y m\xe1s bugs. Todos los esfuerzos que se hagan por fuera del c\xf3digo para compensar las deficiencias de \xe9ste no sirven, porque es como la basura que se esconde debajo de la alfombra, la basura que es el c\xf3digo seguir\xe1 acumul\xe1ndose y la alfombra en un punto ya no alcanzar\xe1 para tapar tanta basura. Lo mejor es arreglar todo ese desastre y no intentar taparlo."),(0,r.kt)("p",null,"Los problemas del c\xf3digo se solucionan trabajando en el mismo c\xf3digo, mejorando la calidad del mismo por etapas, de a poco con sucesivos refactors, aplicando buenas pr\xe1cticas hasta llegar a obtener un c\xf3digo limpio y mantenible. "),(0,r.kt)("h3",{id:"por-qu\xe9-defiendo-clean-code-y-no-otras-pr\xe1cticas-de-desarrollo"},"\xbfPor qu\xe9 defiendo Clean Code y no otras pr\xe1cticas de desarrollo?"),(0,r.kt)("p",null,"Clean Code es una filosof\xeda de desarrollo de software, con un listado de reglas y un conjunto de buenas pr\xe1cticas de desarrollo, muchas de ellas tomadas de otros lados, que facilitan la escritura y lectura de un c\xf3digo, haci\xe9ndolo m\xe1s f\xe1cil de entender y, que por lo tanto, aseguran su mantenibilidad. A diferencia de otras pr\xe1cticas m\xe1s dif\xedciles de implementar, como TDD que requiere tener mucho de conocimiento de testing, Clean Code puede ser aplicada por todos los desarrolladores, con tan solo aplicar algunas reglas simples ya se puede asegurar la viabilidad de un proyecto a largo plazo. Un c\xf3digo limpio y elegante es f\xe1cil y barato de evolucionar, escalar y mantener."),(0,r.kt)("h3",{id:"por-qu\xe9-prefiero-implementar-clean-code-y-no-una-buena-documentaci\xf3n"},"\xbfPor qu\xe9 prefiero implementar Clean Code y no una buena documentaci\xf3n?"),(0,r.kt)("p",null,"Una documentaci\xf3n muchas veces miente o no dice toda la verdad. Es texto que, frecuentemente, queda desfasado de la realidad, o no refleja la funcionalidad del c\xf3digo que ha sufrido reiterados cambios. Tambi\xe9n puede suceder que los desarrolladores no mantengan actualizada la documentaci\xf3n. A fin de cuentas, no hay mejor fuente de la verdad que el c\xf3digo mismo, porque el c\xf3digo se ejecuta y funciona o no. Por esta raz\xf3n es importante que el c\xf3digo sea legible, predecible y mantenible. Cualquier regla de negocio compleja que se ha olvidado, f\xe1cilmente se la puede recordar leyendo un c\xf3digo bien escrito."),(0,r.kt)("h3",{id:"por-qu\xe9-un-lenguaje-tipado-y-no-uno-din\xe1mico"},"\xbfPor qu\xe9 un lenguaje tipado y no uno din\xe1mico?"),(0,r.kt)("p",null,"Es t\xedpico ver a un desarrollador JavaScript debugueando, teniendo que ejecutar su aplicaci\xf3n e insertando \u201cconsole.log\u201d en el c\xf3digo para ver en la consola si se est\xe1n enviando correctamente los datos, o si estos llegan con el formato correcto, etc. Los lenguajes din\xe1micos cuando son usados correctamente resultan ser muy pr\xe1cticos, pero cuando se abusa de las virtudes y flexibilidad que poseen, pueden generar c\xf3digo poco predecible, ilegible y muy propenso a errores. "),(0,r.kt)("p",null,"Lamentablemente, los programadores que solo han usado lenguajes din\xe1micos, no tienen bien claro como y cuando es correcto usar las virtudes de estos lenguajes, y cuando esto sucede, crean c\xf3digo din\xe1mico que es muy dif\xedcil de mantener. Los lenguajes tipados vienen a solucionar este problema, ya que son lenguajes bien documentados y predecibles, y son muy estrictos en como manejan los datos. "),(0,r.kt)("p",null,"Los defensores de los lenguajes din\xe1micos dir\xe1n que los lenguajes tipados agregan una capa de abstracci\xf3n innecesaria para el manejo de los datos, y que merma la productividad. Esto es medianamente cierto porque al inicio hay que invertir tiempo en definir en como va a ser los datos, pero a mediano y largo plazo, estos lenguajes ayudar\xe1n a prevenir la mayor\xeda de los errores, sin la necesidad de ejecutar el c\xf3digo en vivo, lo que es muy favorable tambi\xe9n a la hora de hacer refactors."),(0,r.kt)("h3",{id:"valores-por-defecto-seg\xfan-su-tipo-y-no-resultados-din\xe1micos"},"Valores por defecto seg\xfan su tipo y no resultados din\xe1micos."),(0,r.kt)("p",null,"Muchas veces he tenido que consumir APIs hechas por otros desarrolladores, las cuales lamentablemente respond\xedan con datos dif\xedciles de tratar, ya sea porque los objetos eran din\xe1micos o porque las propiedades de los objetos variaban en su tipo de dato, o porque estos objetos variaban en la cantidad de propiedades que conten\xedan, etc.  Esto me oblig\xf3 a tener que desarrollar permanentemente a la defensiva, es decir, deb\xeda preguntar en el c\xf3digo, usando condicionales, si los datos exist\xedan y si ten\xedan el formato correcto para prevenir errores de ejecuci\xf3n, y si no ten\xedan el formato correcto, deb\xeda reconvertirlo u obtenerlo de otro lado de la respuesta, cuesti\xf3n que terminaba ensuciando mi c\xf3digo con el uso de muchos condicionales que preven\xedan errores y que, de alguna forma u otra, intentaban obtener los datos para poder manejarlos bas\xe1ndose en decisiones, es decir, m\xe1s condicionales. "),(0,r.kt)("p",null,"Otra cuesti\xf3n que me sumaba complejidad t\xe9cnica, suced\xeda cuando los datos no ten\xedan un nombre bien descriptivo de que significaba, ni mucho menos pod\xeda intuir de que se trataba, O peor aun, cuando los datos no declaraban conclusiones o deducciones, y yo mismo con condicionales deb\xeda averiguar de que tipo de datos se trataban."),(0,r.kt)("p",null,"Yamila, ","[24.09.21 22:18]","\nConsidero que colocar valores por defecto es respetar el tipo de dato de una variable o propiedad, para que siempre mantenga el mismo tipo de dato, incluso cuando se ha intentado asignarle un valor vac\xedo este deber\xeda seguir manteniendo el mismo formato. Cuando hablo de valores vac\xedos por defecto seg\xfan su tipo, me refiero a que, por ejemplo, una propiedad que es un listado de objetos, jam\xe1s deber\xe1 tener otro valor que no sea un listado, y si el listado es vac\xedo, no debe ser null, en su lugar debe ser un listado sin valores. "),(0,r.kt)("p",null,"Lo mismo sucede con las propiedades que son n\xfameros, que en todo momento no deben dejar de serlo, y en caso de querer representar un valor vac\xedo por defecto ser\xe1 0. Y en cuanto a las propiedades que son texto, estas deben tener un texto vac\xedo y no un null, ni mucho menos, otro tipo de dato. "),(0,r.kt)("p",null,"Por culpa de la mala pr\xe1ctica de otros, la complejidad t\xe9cnica que esto sumaba a mi c\xf3digo era tal que mi productividad se reduc\xeda considerablemente. Por suerte, aprend\xed, durante una meetup, una estrategia de como solucionarlo, normalizando los datos en la capa donde estos ingresan en la aplicaci\xf3n. Ya no tengo que intentar arreglar los datos, ni impedir errores en otras partes de la aplicaci\xf3n, he aprendido a solucionar la mayor\xeda de los problemas relacionados con el mal manejo de los datos. "),(0,r.kt)("h3",{id:"por-qu\xe9-programaci\xf3n-declarativa-y-no-imperativa"},"\xbfPor qu\xe9 programaci\xf3n declarativa y no imperativa?"),(0,r.kt)("p",null,"En varias ocasiones me he encontrado manteniendo c\xf3digo muy complejo, lleno de iteradores dentro de otros iteradores, y con muchos condicionales dentro. Resulta muy dif\xedcil poder entender el objetivo, o lo que se intenta resolver, dada la enorme cantidad de informaci\xf3n visual expresada en el c\xf3digo sobre diferentes procesos, todos mezclados en una \xfanica soluci\xf3n. "),(0,r.kt)("p",null,"El c\xf3digo que es declarativo, en cambio, ayuda a entender inmediatamente que es cada parte del conjunto de la soluci\xf3n, ya que cada avance en la soluci\xf3n es bien descriptiva y su c\xf3digo es escalado. Usar un c\xf3digo declarativo me hace ser m\xe1s productivo al momento de agregar nuevas caracter\xedsticas, y conllevan a mayor productividad en la creacion de nuevas caracteristicas y en su mantenimiento a mediano y largo plazo."),(0,r.kt)("h3",{id:"por-qu\xe9-programaci\xf3n-funcional-y-no-orientada-a-objetos"},"\xbfPor qu\xe9 programaci\xf3n funcional y no orientada a objetos?"),(0,r.kt)("p",null,"Cuando comenc\xe9 a incursionar sobre temas relacionados sobre la programaci\xf3n declarativa, y sobre otras pr\xe1cticas para crear c\xf3digo mantenible, d\xed con lo que es la programaci\xf3n funcional y, gracias a ella, considero que he mejorado enormemente la prolijidad con la que escribo c\xf3digo."),(0,r.kt)("p",null,"Gracias a la programaci\xf3n funcional he podido reducir l\xedneas de c\xf3digo, al mismo tiempo que he podido desglosar soluciones complejas en muchas partes, las cuales f\xe1cilmente pueden ser reutilizadas por otras partes de la aplicaci\xf3n. Incluso puedo armar funciones nuevas utilizando otras ya existentes. Su inmutabilidad y el uso de funciones puras, me ayudan a crear c\xf3digo que es m\xe1s predecible, sin tener que tratar con efectos colaterales indeseados. Y gracias a su recursividad y funciones de primera clase, puedo hacer partes de c\xf3digo muy flexibles y reutilizables. "),(0,r.kt)("p",null,"La programaci\xf3n orientada a objetos la utilizo principalmente para modelar los datos, solo eso, el resto lo trabajo con la programaci\xf3n funcional, ya que me permite programar m\xe1s f\xe1cilmente soluciones que son muy complejas."),(0,r.kt)("h3",{id:"por-qu\xe9-clean-arquitecture-y-no-cualquier-improvisaci\xf3n-u-soluci\xf3n-r\xe1pida"},"\xbfPor qu\xe9 Clean Arquitecture y no cualquier improvisaci\xf3n u soluci\xf3n r\xe1pida?"),(0,r.kt)("p",null,"Es muy com\xfan ver en proyectos, en los que hay que realizar mantenimiento, que los diferentes tipos de funcionalidades del c\xf3digo no est\xe9n agrupados, ni clasificados, ni ordenados, e incluso que est\xe9n mezclados con otros tipos de funcionalidades. Esto hace que sea dif\xedcil saber donde colocar las nuevas funcionalidades y, adem\xe1s, que sea poco intuitivo donde encontrar las funcionalidades que ya fueron hechas."),(0,r.kt)("p",null,"Yamila, ","[24.09.21 22:18]","\nOtra situaci\xf3n frecuente, es ver que los proyectos no tienen un \xfanico patr\xf3n para realizar una determinada funcionalidad, o que las diferentes partes de la aplicaci\xf3n se comunican entre s\xed sin una jerarqu\xeda clara, ni tengan un flujo intuitivo en como se comunican estas partes. Todo este tipo de situaciones hacen que merme la productividad de todo un sector de desarrollo. "),(0,r.kt)("p",null,"Clean Arquitecture viene a solucionar todos estos problemas relacionados con la organizaci\xf3n del c\xf3digo. Hereda todas las pr\xe1cticas de Clean Code, que est\xe1n centradas en la calidad del c\xf3digo, pero las lleva a una escala superior para los proyectos, ordenando, clasificando y definiendo flujos de comunicaci\xf3n de cada una de sus partes, para lograr una correcta homogeneizaci\xf3n. Establece reglas claras que resultan ser muy intuitivas para los desarrolladores cuando estos tienen que agregar y modificar caracter\xedsticas al proyecto. "),(0,r.kt)("p",null,"Es cierto que con un simple y bien escalado MVC, MVP, MVVM es m\xe1s que suficiente, pero existen otras arquitecturas que, si bien son m\xe1s complejas de entender y aprender, son id\xf3neas para proyectos que son realmente enormes y que deben durar mucho tiempo. "),(0,r.kt)("h3",{id:"-por-qu\xe9-github-flow-y-no-gitlab-flow-"},"\xbf Por qu\xe9 GitHub Flow y no GitLab Flow ?"),(0,r.kt)("p",null,"Usar GitLab Flow tiene sus ventajas y desventajas. Permite atajar todos los errores de c\xf3digo con la utilizaci\xf3n de m\xfaltiples ramas de desarrollo. Sin embargo, tambi\xe9n es muy probable que surjan diferencias y conflictos de c\xf3digo entre las ramas. Esto implica que los desarrolladores continuamente deban invertir esfuerzo para resolver los conflictos, corriendo el riesgo de corregirlos incorrectamente. Esta dificultad se acent\xfaa todav\xeda m\xe1s cuando la metodolog\xeda \xe1gil utilizada es SCRUM, porque las entregas se hacen despu\xe9s de mucho tiempo de desarrollo y las diferencias de c\xf3digo y conflictos son m\xe1s grandes. "),(0,r.kt)("p",null,"GitHub Flow, en cambio, nos propone un flujo de trabajo mucho m\xe1s simplificado, con una \xfanica rama de desarrollo como la real, y cada cambio u modificaci\xf3n que se le haga a esta, debe ser tratado como si fuera el producto final. En vez de tener que invertir tanto esfuerzo en resolver conflictos de c\xf3digo, se lo invierte en mejorar la calidad del c\xf3digo nuevo."),(0,r.kt)("p",null,"GitHub Flow incentiva a los desarrolladores a hacer entregas continuas, peque\xf1as y de alta calidad, lo que es id\xf3neo cuando se desea incorporar \u201cintegraci\xf3n continua\u201d en el ambiente de producci\xf3n, sin tener que esperar largos periodos de tiempos para que el cliente pueda ver los nuevos avances en su producto. "),(0,r.kt)("p",null,"Siguiendo la misma l\xednea de Kaizen, GitHub Flow plantea ir conquistando peque\xf1os objetivos para lograr una meta final mayor, por lo tanto, se integra naturalmente a Kanban y Scrumban, metodolog\xedas que tambi\xe9n son extremadamente \xe1giles y se basan en peque\xf1as tareas entregables."),(0,r.kt)("h3",{id:"por-qu\xe9-kanban-y-no-scrum"},"\xbfPor qu\xe9 Kanban y no SCRUM?"),(0,r.kt)("p",null,"Scrum es sin duda una metodolog\xeda excelente cuando se la aplica correctamente, pero es realmente dif\xedcil implementarla para la mayor\xeda de las empresas, en especial para todas aquellas que son peque\xf1as y medianas."),(0,r.kt)("p",null,"La dificultad de implementar SCRUM consiste en que no est\xe1 preparada para afrontar cambios abruptos en el transcurso de un Sprint. El an\xe1lisis, la planificaci\xf3n, la organizaci\xf3n y la estimaci\xf3n de las tareas se realiza antes de que comience el Sprint. Sumar una tarea que no fue contemplada con anticipaci\xf3n acarrea caos. Cuando los desarrolladores se salen de las estimaciones por causas imprevistas, tienden a generar soluciones r\xe1pidas y de mala calidad, por ende acumulan deuda t\xe9cnica que en el futuro afectar\xe1 a la productividad."),(0,r.kt)("p",null,"SCRUM solo debe ser utilizado en equipos de trabajo grandes, porque se necesitan muchos roles adicionales y espec\xedficos para poder llevar a cabo la metodolog\xeda \xe1gil."),(0,r.kt)("p",null,"Yamila, ","[24.09.21 22:18]","\nKanban comparte similitudes con SCRUM, pero su enfoque es opuesto, ya que no cuenta con Sprints r\xedgidos y muy planificados. Kanban recibe las tareas y su planificaci\xf3n forma parte del estado de la misma tarea, es decir, quienes crean, planifican, priorizan y dise\xf1an las tareas, tambi\xe9n participan en el tablero con los estados de estas. Por lo tanto, de esta manera es f\xe1cil ver como las tareas fluyen entre los diferentes estados, y se puede detectar en que estados hay cuellos de botella u otros problemas. "),(0,r.kt)("p",null,"Gracias a que Kanban tiene estados para describir en que fase se encuentran las tareas, y que no requiere de reuniones largas y extensas (como las planning de SCRUM), las reuniones de planificaci\xf3n se hacen por tarea de forma separada de las dem\xe1s, es decir, son reuniones mucho m\xe1s cortas que no ocupan jornadas enteras de trabajo. "),(0,r.kt)("p",null,"Kanban est\xe1 alineado con la pr\xe1ctica Kaizen que consiste en dividir tareas complejas en objetivos peque\xf1os e incrementales, donde cada tarea que representa un objetivo no puede durar m\xe1s de dos o tres horas de trabajo, y si as\xed lo fuese, se deber\xe1 dividir el objetivo aun m\xe1s en tareas m\xe1s peque\xf1as y concretas. Gracias a esto se puede estimar cuanto tiempo de desarrollo puede tomar una historia de usuario, contando la cantidad de objetivos y multiplic\xe1ndolos por dos o tres horas. "),(0,r.kt)("p",null,"En lo que se refiere a los cambios inesperados, y de \xfaltimo momento, que inevitablemente surgen, con Kanban se pueden incorporar perfectamente. Cada cambio ser\xe1 considerado como una nueva tarea. Luego se deber\xe1 establecer que tareas tienen que resolverse con mayor urgencia que otras y se les dar\xe1 prioridad. "),(0,r.kt)("p",null,"Kanban tambi\xe9n es apropiado para equipos de trabajo grandes porque escala muy bien en ellos. Permite visualizar todas las tareas de todos los sectores, o de uno en concreto, filtr\xe1ndolas por un sistema de etiquetado, y cada sector o grupo de trabajo puede tener sus propias etiquetas para identificar sus tareas con mayor facilidad. "),(0,r.kt)("p",null,"Como si esto fuera poco, dado que las reglas de Kanban son muy concretas y simples, se le puede incorporar pr\xe1cticas de otras metodolog\xedas. Es muy com\xfan que se incorporen ciertas pr\xe1cticas de SCRUM por las necesidades de las empresas y de los clientes, transformando Kanban en Scrumban. "),(0,r.kt)("p",null,"Seg\xfan sea el caso, a veces es mejor armar peque\xf1os grupos de trabajo multidisciplinarios, otras veces es mejor separar al equipo de IT en \xe1reas grandes y especificas. Lo que si es seguro y tengo bien en claro es que Kanban es una metodolog\xeda verdaderamente \xe1gil, muy potente y altamente productiva."),(0,r.kt)("h3",{id:"por-qu\xe9-acordar-tareas-en-base-a-descripciones-y-no-en-base-a-palabras"},"\xbfPor qu\xe9 acordar tareas en base a descripciones y no en base a palabras?"),(0,r.kt)("p",null,"A la hora de asignar y pactar las tareas que se van a resolver en el d\xeda, estas deben contar con una descripci\xf3n bien detallada, y no pactarlas de palabra porque es muy frecuente que las personas se olviden lo que acordaron en reuniones previas. Adem\xe1s, en el caso de que se hayan tomado malas decisiones con respecto a los objetivos de las tareas, se puede recurrir a las dichas descripciones para respaldar el trabajo hecho y las decisiones que se tomaron de conjunto."),(0,r.kt)("h3",{id:"considerar-todos-los-puntos-de-vista-y-no-asumir-veracidades-propias"},"Considerar todos los puntos de vista y no asumir veracidades propias"),(0,r.kt)("p",null,"La informaci\xf3n y los datos son clave para la planificaci\xf3n de las tareas. Mientras m\xe1s datos e informaci\xf3n se posea, m\xe1s certera va a hacer la planificaci\xf3n y el planteamiento de los objetivos, por esto, es importante hacer reuniones cortas con diferentes miembros del equipo, e incluso de diferentes \xe1reas, los usuarios y los clientes, para poder conocer sus puntos de vista y lograr encontrar una convergencia entre todas las ideas. De esta manera, es posible detectar cuestiones que no fueron consideraras y que podr\xedan acarrear grandes problemas en el futuro."))}p.isMDXComponent=!0}}]);